<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__memory_8cpp_source" xml:lang="en-US">
<title>Memory.cpp</title>
<indexterm><primary>TinyLib/Base/Memory.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__memory_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__memory_8h">Memory.h</link>&quot;</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00002"/>00002 
<anchor xml:id="__memory_8cpp_source_1l00003"/><link linkend="_namespacetl">00003</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacetl">tl</link>&#32;{
<anchor xml:id="__memory_8cpp_source_1l00004"/>00004 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allocate&#32;memory&#32;for&#32;amount&#32;&lt;size&gt;.</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00005"/><link linkend="_namespacetl_1a2ac98dd95bdf0b59af459a290354c589">00005</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_namespacetl_1a2ac98dd95bdf0b59af459a290354c589">malloc</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;size)
<anchor xml:id="__memory_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;{
<anchor xml:id="__memory_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VirtualAlloc(NULL,&#32;size,&#32;MEM_COMMIT&#32;|&#32;MEM_RESERVE,&#32;PAGE_EXECUTE_READWRITE);
<anchor xml:id="__memory_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;}
<anchor xml:id="__memory_8cpp_source_1l00009"/>00009 
<anchor xml:id="__memory_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Free&#32;memory&#32;from&#32;pointer.</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00011"/><link linkend="_namespacetl_1a27f87676958c34ab5d023c25d954a58a">00011</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacetl_1a27f87676958c34ab5d023c25d954a58a">free</link>(<emphasis role="keywordtype">void</emphasis>*&#32;ptr)
<anchor xml:id="__memory_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;{
<anchor xml:id="__memory_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VirtualFree(ptr,&#32;0,&#32;MEM_RELEASE);
<anchor xml:id="__memory_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;}
<anchor xml:id="__memory_8cpp_source_1l00015"/>00015 }
<anchor xml:id="__memory_8cpp_source_1l00016"/>00016 
<anchor xml:id="__memory_8cpp_source_1l00017"/>00017 <emphasis role="comment">//&#32;To&#32;enable&#32;float&#32;support</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00018"/><link linkend="__memory_8cpp_1a4cf04c7a2389a90415c8032ce5e58e50">00018</link> <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__memory_8cpp_1a4cf04c7a2389a90415c8032ce5e58e50">_fltused</link>&#32;=&#32;1;
<anchor xml:id="__memory_8cpp_source_1l00019"/>00019 
<anchor xml:id="__memory_8cpp_source_1l00020"/>00020 
<anchor xml:id="__memory_8cpp_source_1l00021"/>00021 <emphasis role="preprocessor">#pragma&#32;function(memset)</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00022"/><link linkend="__memory_8cpp_1a00d6f69015f4868522db5fa267282022">00022</link> <emphasis role="keywordtype">void</emphasis>*&#32;__cdecl&#32;<link linkend="__memory_8cpp_1a00d6f69015f4868522db5fa267282022">memset</link>(<emphasis role="keywordtype">void</emphasis>*&#32;ptr,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size)
<anchor xml:id="__memory_8cpp_source_1l00023"/>00023 {
<anchor xml:id="__memory_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(ptr);
<anchor xml:id="__memory_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(size--)
<anchor xml:id="__memory_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*p++&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(value);
<anchor xml:id="__memory_8cpp_source_1l00027"/>00027 
<anchor xml:id="__memory_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr;
<anchor xml:id="__memory_8cpp_source_1l00029"/>00029 }
<anchor xml:id="__memory_8cpp_source_1l00030"/>00030 
<anchor xml:id="__memory_8cpp_source_1l00031"/>00031 
<anchor xml:id="__memory_8cpp_source_1l00032"/>00032 <emphasis role="comment">//&#32;Allocate&#32;memory&#32;for&#32;a&#32;new&#32;value.</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00033"/><link linkend="__memory_8cpp_1a1a7f24760c8c7ad3bfcd54856d906fc2">00033</link> <emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00034"/>00034 {
<anchor xml:id="__memory_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;<link linkend="_namespacetl_1a2ac98dd95bdf0b59af459a290354c589">tl::malloc</link>(size);
<anchor xml:id="__memory_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ptr)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__memory_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr;
<anchor xml:id="__memory_8cpp_source_1l00038"/>00038 }
<anchor xml:id="__memory_8cpp_source_1l00039"/>00039 
<anchor xml:id="__memory_8cpp_source_1l00040"/>00040 <emphasis role="comment">//&#32;Free&#32;memory&#32;from&#32;this&#32;variable.</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00041"/><link linkend="__memory_8cpp_1afa145befcf5e7b83424408ca503c8637">00041</link> <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>(<emphasis role="keywordtype">void</emphasis>*&#32;ptr)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00042"/>00042 {
<anchor xml:id="__memory_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<link linkend="_namespacetl_1a27f87676958c34ab5d023c25d954a58a">tl::free</link>(ptr);
<anchor xml:id="__memory_8cpp_source_1l00044"/>00044 }
<anchor xml:id="__memory_8cpp_source_1l00045"/>00045 
<anchor xml:id="__memory_8cpp_source_1l00046"/>00046 <emphasis role="comment">//&#32;Allocate&#32;memory&#32;for&#32;a&#32;new&#32;array.</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00047"/><link linkend="__memory_8cpp_1aa75472ab4b765cf6f6b5b0ebcd4a28c8">00047</link> <emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>[](<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00048"/>00048 {
<anchor xml:id="__memory_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;<link linkend="_namespacetl_1a2ac98dd95bdf0b59af459a290354c589">tl::malloc</link>(size);
<anchor xml:id="__memory_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ptr)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__memory_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr;
<anchor xml:id="__memory_8cpp_source_1l00052"/>00052 }
<anchor xml:id="__memory_8cpp_source_1l00053"/>00053 
<anchor xml:id="__memory_8cpp_source_1l00054"/>00054 <emphasis role="comment">//&#32;Free&#32;memory&#32;from&#32;this&#32;array.</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00055"/><link linkend="__memory_8cpp_1a22aea74a1155aa798d6032da46da2391">00055</link> <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>[](<emphasis role="keywordtype">void</emphasis>*&#32;ptr)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00056"/>00056 {
<anchor xml:id="__memory_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<link linkend="_namespacetl_1a27f87676958c34ab5d023c25d954a58a">tl::free</link>(ptr);&#32;<emphasis role="comment">//&#32;Use&#32;custom&#32;free&#32;for&#32;arrays</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00058"/>00058 }
<anchor xml:id="__memory_8cpp_source_1l00059"/>00059 
<anchor xml:id="__memory_8cpp_source_1l00060"/>00060 <emphasis role="comment">//&#32;Unsigned&#32;int&#32;parameter&#32;is&#32;needed&#32;to&#32;overload&#32;compiler.</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00061"/><link linkend="__memory_8cpp_1a91e676caef3a7611d29e053ed1789a1a">00061</link> <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>(<emphasis role="keywordtype">void</emphasis>*&#32;ptr,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;size)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="__memory_8cpp_source_1l00062"/>00062 {
<anchor xml:id="__memory_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<link linkend="_namespacetl_1a27f87676958c34ab5d023c25d954a58a">tl::free</link>(ptr);
<anchor xml:id="__memory_8cpp_source_1l00064"/>00064 }
</programlisting></section>
