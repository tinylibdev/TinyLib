.TH "tl::Vector< T >" 3 "Version 0.1.0" "TinyLib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tl::Vector< T >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <Vector\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVector\fP ()"
.br
.RI "Create a new empty vector\&. "
.ti -1c
.RI "\fB~Vector\fP ()"
.br
.RI "Clean up vector data\&. "
.ti -1c
.RI "void \fBpush\fP (const T &value)"
.br
.RI "Adds a new element to the end of the vector\&. "
.ti -1c
.RI "T \fBpop\fP ()"
.br
.RI "Get the last element and remove it from the vector\&. "
.ti -1c
.RI "T & \fBoperator[]\fP (size_t index)"
.br
.RI "Write access to elements\&. "
.ti -1c
.RI "const T & \fBoperator[]\fP (size_t index) const"
.br
.RI "Read access to elements\&. "
.ti -1c
.RI "void \fBresize\fP (size_t new_capacity)"
.br
.RI "Resize the max capacity for this vector\&. "
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "Clear vector size for most vector methods\&. "
.ti -1c
.RI "size_t \fBgetSize\fP () const"
.br
.RI "Get the size of this vector\&. "
.ti -1c
.RI "size_t \fBgetCapacity\fP () const"
.br
.RI "Get the capacity of this vector\&. "
.ti -1c
.RI "void \fBinsert\fP (size_t pos, const T &value)"
.br
.RI "Insert an element anywhere in the vector\&. "
.ti -1c
.RI "void \fBerase\fP (size_t pos)"
.br
.RI "Delete an element and shift the rest of the vector to fit\&. "
.ti -1c
.RI "T * \fBbegin\fP ()"
.br
.ti -1c
.RI "T * \fBend\fP ()"
.br
.ti -1c
.RI "const T * \fBbegin\fP () const"
.br
.ti -1c
.RI "const T * \fBend\fP () const"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T>
.br
class tl::Vector< T >"
.PP
Definition at line \fB7\fP of file \fBVector\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T > \fBtl::Vector\fP< T >::Vector ()"

.PP
Create a new empty vector\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP What type this vector will hold\&. 
.RE
.PP

.PP
Definition at line \fB38\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > \fBtl::Vector\fP< T >::~\fBVector\fP ()"

.PP
Clean up vector data\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP How much memory is freed depends on the data type you used\&. 
.RE
.PP

.PP
Definition at line \fB49\fP of file \fBVector\&.h\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename T > T * \fBtl::Vector\fP< T >::begin ()\fR [inline]\fP"

.PP
Definition at line \fB23\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > const T * \fBtl::Vector\fP< T >::begin () const\fR [inline]\fP"

.PP
Definition at line \fB25\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > void \fBtl::Vector\fP< T >::clear ()"

.PP
Clear vector size for most vector methods\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Must match the type for this vector\&. 
.RE
.PP

.PP
Definition at line \fB132\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > T * \fBtl::Vector\fP< T >::end ()\fR [inline]\fP"

.PP
Definition at line \fB24\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > const T * \fBtl::Vector\fP< T >::end () const\fR [inline]\fP"

.PP
Definition at line \fB26\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > void \fBtl::Vector\fP< T >::erase (size_t pos)"

.PP
Delete an element and shift the rest of the vector to fit\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP T Must match the type for this vector\&. 
.RE
.PP
\fBParameters\fP
.RS 4
\fIpos\fP Index of element to delete\&.
.RE
.PP
When you erase an element, everything to the right of that element will be shifted left in the vector to not leave an empty space\&. 
.PP
Definition at line \fB187\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > size_t \fBtl::Vector\fP< T >::getCapacity () const"

.PP
Get the capacity of this vector\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Must match the type for this vector\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Current capacity of vector\&.
.RE
.PP
Capacity is how big the internal array is for this vector\&. Good to check to make sure you don't go out of bounds with []\&. 
.PP
Definition at line \fB157\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > size_t \fBtl::Vector\fP< T >::getSize () const"

.PP
Get the size of this vector\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Must match the type for this vector\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Current size of vector\&.
.RE
.PP
Size is based on how many elements actually exist in the vector\&. 
.PP
Definition at line \fB144\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > void \fBtl::Vector\fP< T >::insert (size_t pos, const T & value)"

.PP
Insert an element anywhere in the vector\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP T Must match the type for this vector\&. 
.RE
.PP
\fBParameters\fP
.RS 4
\fIpos\fP Position to insert element at\&. 
.br
\fIvalue\fP Element to insert\&. 
.RE
.PP

.PP
Definition at line \fB168\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > T & \fBtl::Vector\fP< T >::operator[] (size_t index)"

.PP
Write access to elements\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Must match the type for this vector\&. 
.RE
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Element to overwrite\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Reference to element to overwrite\&. 
.RE
.PP

.PP
Definition at line \fB90\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > const T & \fBtl::Vector\fP< T >::operator[] (size_t index) const"

.PP
Read access to elements\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Must match the type for this vector\&. 
.RE
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Element to read\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Reference to element to read\&. 
.RE
.PP

.PP
Definition at line \fB101\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > T \fBtl::Vector\fP< T >::pop ()"

.PP
Get the last element and remove it from the vector\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Must match the type for this vector\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The removed element\&. 
.RE
.PP

.PP
Definition at line \fB75\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > void \fBtl::Vector\fP< T >::push (const T & value)"

.PP
Adds a new element to the end of the vector\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Must match the type for this vector\&. 
.RE
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Element to add\&. 
.br
 
.RE
.PP

.PP
Definition at line \fB62\fP of file \fBVector\&.h\fP\&.
.SS "template<typename T > void \fBtl::Vector\fP< T >::resize (size_t new_capacity)"

.PP
Resize the max capacity for this vector\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Must match the type for this vector\&. 
.RE
.PP
\fBParameters\fP
.RS 4
\fInew_capacity\fP New capacity\&.
.RE
.PP
If you don't use push or pop, you can also manually resize the vector with this, and can then access elements within capacity using []\&. 
.PP
Definition at line \fB114\fP of file \fBVector\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for TinyLib from the source code\&.
