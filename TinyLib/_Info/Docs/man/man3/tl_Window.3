.TH "tl::Window" 3 "Version 0.1.0" "TinyLib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tl::Window
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <Window\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWindow\fP (\fBVec2i\fP={800, 600}, const char *='Window', LONG style=WS_OVERLAPPEDWINDOW)"
.br
.RI "Create a new window, all parameters are optional\&. "
.ti -1c
.RI "\fB~Window\fP ()"
.br
.RI "Clean up window resources\&. "
.ti -1c
.RI "void \fBcreate\fP (\fBVec2i\fP={800, 600}, const char *='Window', LONG style=WS_OVERLAPPEDWINDOW)"
.br
.RI "Recreate the window\&. "
.ti -1c
.RI "bool \fBisOpen\fP ()"
.br
.RI "Check if the window is open\&. "
.ti -1c
.RI "void \fBdraw\fP (\fBRectangle\fP &rectangle)"
.br
.RI "Draw a rectangle to the screen\&. "
.ti -1c
.RI "void \fBdraw\fP (\fBText\fP &text)"
.br
.RI "Draw text to the screen\&. "
.ti -1c
.RI "void \fBclose\fP ()"
.br
.RI "Close this window\&. "
.ti -1c
.RI "void \fBclear\fP (\fBColor\fP color=\fBColor\fP(255, 255, 255, 255))"
.br
.RI "Clear the window\&. "
.ti -1c
.RI "\fBVec2i\fP \fBgetSize\fP () const"
.br
.RI "Get size of the window\&. "
.ti -1c
.RI "void \fBsetSize\fP (\fBVec2i\fP)"
.br
.RI "Set the size of the window\&. "
.ti -1c
.RI "void \fBsetTitle\fP (const char *title)"
.br
.RI "Change the window title\&. "
.ti -1c
.RI "void \fBsetPosition\fP (\fBVec2i\fP)"
.br
.RI "Set the window's position on screen\&. "
.ti -1c
.RI "void \fBmove\fP (\fBVec2i\fP)"
.br
.RI "Move the window from current position\&. "
.ti -1c
.RI "\fBVec2i\fP \fBgetPosition\fP () const"
.br
.RI "Get the current position of the window\&. "
.ti -1c
.RI "void \fBdisplay\fP ()"
.br
.RI "Display what you've drawn to the window\&. "
.ti -1c
.RI "void \fBlimitFPS\fP (\fBu32\fP fps)"
.br
.RI "Caps the framerate to given value, 0 for unlimited\&. "
.ti -1c
.RI "\fBbit\fP \fBcheckEvent\fP (\fBu8\fP event)"
.br
.RI "Check if a window event activated this frame\&. "
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB35\fP of file \fBWindow\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "tl::Window::Window (\fBVec2i\fP size = \fR{800, 600}\fP, const char * title = \fR'Window'\fP, LONG style = \fRWS_OVERLAPPEDWINDOW\fP)"

.PP
Create a new window, all parameters are optional\&. 
.PP
\fBParameters\fP
.RS 4
\fIsize\fP The width, height of this window in pixels\&. 
.br
\fItitle\fP The title of the window\&. 
.br
\fIstyle\fP Additional window style flags\&.
.RE
.PP
Size is optional, default is 800x600\&. Title is optional, default is 'Window'\&. Style is optional, default is \fBtl::Style::Default\fP\&. 
.PP
Definition at line \fB53\fP of file \fBWindow\&.cpp\fP\&.
.SS "tl::Window::~Window ()"

.PP
Clean up window resources\&. 
.PP
Definition at line \fB60\fP of file \fBWindow\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBbit\fP tl::Window::checkEvent (\fBu8\fP event)"

.PP
Check if a window event activated this frame\&. 
.PP
\fBParameters\fP
.RS 4
\fIevent\fP \fBWindow\fP event to check\&. 
.RE
.PP
\fBReturns\fP
.RS 4
True if specified event activated this frame\&.
.RE
.PP
Events are an enum defined in \fBWindow\&.h\fP, \fBtl::Event\fP\&. 
.PP
Definition at line \fB250\fP of file \fBWindow\&.cpp\fP\&.
.SS "void tl::Window::clear (\fBColor\fP color = \fR\fBColor\fP(255, 255, 255, 255)\fP)"

.PP
Clear the window\&. 
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP \fBColor\fP to clear window with\&. 
.RE
.PP

.PP
Definition at line \fB167\fP of file \fBWindow\&.cpp\fP\&.
.SS "void tl::Window::close ()"

.PP
Close this window\&. 
.PP
Definition at line \fB158\fP of file \fBWindow\&.cpp\fP\&.
.SS "void tl::Window::create (\fBVec2i\fP size = \fR{800, 600}\fP, const char * title = \fR'Window'\fP, LONG style = \fRWS_OVERLAPPEDWINDOW\fP)"

.PP
Recreate the window\&. 
.PP
\fBParameters\fP
.RS 4
\fIsize\fP The width, height of this window in pixels\&. 
.br
\fItitle\fP The title of the window\&. 
.br
\fIstyle\fP Additional window style flags\&.
.RE
.PP
All parameters are optional, any you don't provide will stay the same\&. 
.PP
Definition at line \fB73\fP of file \fBWindow\&.cpp\fP\&.
.SS "void tl::Window::display ()"

.PP
Display what you've drawn to the window\&. 
.PP
Definition at line \fB174\fP of file \fBWindow\&.cpp\fP\&.
.SS "void tl::Window::draw (\fBRectangle\fP & rectangle)"

.PP
Draw a rectangle to the screen\&. 
.PP
\fBParameters\fP
.RS 4
\fIrectangle\fP The rectangle to draw\&. 
.RE
.PP

.PP
Definition at line \fB143\fP of file \fBWindow\&.cpp\fP\&.
.SS "void tl::Window::draw (\fBText\fP & text)"

.PP
Draw text to the screen\&. 
.PP
\fBParameters\fP
.RS 4
\fItext\fP The text you want to draw\&. 
.RE
.PP

.PP
Definition at line \fB151\fP of file \fBWindow\&.cpp\fP\&.
.SS "\fBVec2i\fP tl::Window::getPosition () const"

.PP
Get the current position of the window\&. 
.PP
\fBReturns\fP
.RS 4
X-position, y-position\&. 
.RE
.PP

.PP
Definition at line \fB224\fP of file \fBWindow\&.cpp\fP\&.
.SS "\fBVec2i\fP tl::Window::getSize () const"

.PP
Get size of the window\&. 
.PP
\fBReturns\fP
.RS 4
Width, height\&. 
.RE
.PP

.PP
Definition at line \fB182\fP of file \fBWindow\&.cpp\fP\&.
.SS "bool tl::Window::isOpen ()"

.PP
Check if the window is open\&. 
.PP
\fBReturns\fP
.RS 4
True if window is open\&.
.RE
.PP
This method also makes sure the program doesn't go past the FPS cap if set with \fBWindow::limitFPS()\fP\&. 
.PP
Definition at line \fB115\fP of file \fBWindow\&.cpp\fP\&.
.SS "void tl::Window::limitFPS (\fBu32\fP fps)"

.PP
Caps the framerate to given value, 0 for unlimited\&. 
.PP
\fBParameters\fP
.RS 4
\fIfps\fP Framerate cap\&.
.RE
.PP
FPS cap is enforced in \fBWindow::isOpen()\fP\&. 
.PP
Definition at line \fB236\fP of file \fBWindow\&.cpp\fP\&.
.SS "void tl::Window::move (\fBVec2i\fP pos)"

.PP
Move the window from current position\&. 
.PP
\fBParameters\fP
.RS 4
\fIpos\fP Move the window by x, y\&. 
.RE
.PP

.PP
Definition at line \fB216\fP of file \fBWindow\&.cpp\fP\&.
.SS "void tl::Window::setPosition (\fBVec2i\fP pos)"

.PP
Set the window's position on screen\&. 
.PP
\fBParameters\fP
.RS 4
\fIpos\fP New x, y position for the window\&. 
.RE
.PP

.PP
Definition at line \fB208\fP of file \fBWindow\&.cpp\fP\&.
.SS "void tl::Window::setSize (\fBVec2i\fP size)"

.PP
Set the size of the window\&. 
.PP
\fBParameters\fP
.RS 4
\fIsize\fP Set the width, height of this window\&. 
.RE
.PP

.PP
Definition at line \fB192\fP of file \fBWindow\&.cpp\fP\&.
.SS "void tl::Window::setTitle (const char * title)"

.PP
Change the window title\&. 
.PP
\fBParameters\fP
.RS 4
\fItitle\fP New title 
.RE
.PP

.PP
Definition at line \fB200\fP of file \fBWindow\&.cpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for TinyLib from the source code\&.
