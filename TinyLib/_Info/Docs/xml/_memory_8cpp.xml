<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="_memory_8cpp" kind="file" language="C++">
    <compoundname>Memory.cpp</compoundname>
    <includes refid="_memory_8h" local="yes">Memory.h</includes>
    <incdepgraph>
      <node id="1">
        <label>TinyLib/Base/Memory.cpp</label>
        <link refid="_memory_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Memory.h</label>
        <link refid="_memory_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../Base/Win/WinAPI.h</label>
        <link refid="_win_a_p_i_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>DirectXMath.h</label>
      </node>
      <node id="4">
        <label>Windows.h</label>
      </node>
      <node id="11">
        <label>d2d1.h</label>
      </node>
      <node id="5">
        <label>d3d11.h</label>
      </node>
      <node id="7">
        <label>d3dcompiler.h</label>
      </node>
      <node id="10">
        <label>dwrite.h</label>
      </node>
      <node id="6">
        <label>dxgi1_2.h</label>
      </node>
      <node id="9">
        <label>wrl/client.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetl">tl</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="_memory_8cpp_1a4cf04c7a2389a90415c8032ce5e58e50" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int _fltused</definition>
        <argsstring></argsstring>
        <name>_fltused</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.cpp" line="18" column="16" bodyfile="TinyLib/Base/Memory.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_memory_8cpp_1a00d6f69015f4868522db5fa267282022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *__cdecl</type>
        <definition>void *__cdecl memset</definition>
        <argsstring>(void *ptr, int value, size_t size)</argsstring>
        <name>memset</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.cpp" line="22" column="14" bodyfile="TinyLib/Base/Memory.cpp" bodystart="22" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="_memory_8cpp_1a1a7f24760c8c7ad3bfcd54856d906fc2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * operator new</definition>
        <argsstring>(size_t size) noexcept</argsstring>
        <name>operator new</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.cpp" line="33" column="6" bodyfile="TinyLib/Base/Memory.cpp" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="_memory_8cpp_1afa145befcf5e7b83424408ca503c8637" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void operator delete</definition>
        <argsstring>(void *ptr) noexcept</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.cpp" line="41" column="6" bodyfile="TinyLib/Base/Memory.cpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="_memory_8cpp_1aa75472ab4b765cf6f6b5b0ebcd4a28c8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * operator new[]</definition>
        <argsstring>(size_t size) noexcept</argsstring>
        <name>operator new[]</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.cpp" line="47" column="6" bodyfile="TinyLib/Base/Memory.cpp" bodystart="47" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="_memory_8cpp_1a22aea74a1155aa798d6032da46da2391" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void operator delete[]</definition>
        <argsstring>(void *ptr) noexcept</argsstring>
        <name>operator delete[]</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.cpp" line="55" column="6" bodyfile="TinyLib/Base/Memory.cpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="_memory_8cpp_1a91e676caef3a7611d29e053ed1789a1a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void operator delete</definition>
        <argsstring>(void *ptr, unsigned int size) noexcept</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.cpp" line="61" column="6" bodyfile="TinyLib/Base/Memory.cpp" bodystart="61" bodyend="64"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_memory_8h" kindref="compound">Memory.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="namespacetl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetl" kindref="compound">tl</ref><sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>amount<sp/>&lt;size&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="namespacetl_1a2ac98dd95bdf0b59af459a290354c589" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="namespacetl_1a2ac98dd95bdf0b59af459a290354c589" kindref="member">malloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VirtualAlloc(NULL,<sp/>size,<sp/>MEM_COMMIT<sp/>|<sp/>MEM_RESERVE,<sp/>PAGE_EXECUTE_READWRITE);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>memory<sp/>from<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="namespacetl_1a27f87676958c34ab5d023c25d954a58a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetl_1a27f87676958c34ab5d023c25d954a58a" kindref="member">free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VirtualFree(ptr,<sp/>0,<sp/>MEM_RELEASE);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>enable<sp/>float<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="_memory_8cpp_1a4cf04c7a2389a90415c8032ce5e58e50" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_memory_8cpp_1a4cf04c7a2389a90415c8032ce5e58e50" kindref="member">_fltused</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>function(memset)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="_memory_8cpp_1a00d6f69015f4868522db5fa267282022" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>__cdecl<sp/><ref refid="_memory_8cpp_1a00d6f69015f4868522db5fa267282022" kindref="member">memset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(size--)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>a<sp/>new<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="_memory_8cpp_1a1a7f24760c8c7ad3bfcd54856d906fc2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/><ref refid="namespacetl_1a2ac98dd95bdf0b59af459a290354c589" kindref="member">tl::malloc</ref>(size);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Free<sp/>memory<sp/>from<sp/>this<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="_memory_8cpp_1afa145befcf5e7b83424408ca503c8637" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetl_1a27f87676958c34ab5d023c25d954a58a" kindref="member">tl::free</ref>(ptr);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>a<sp/>new<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="_memory_8cpp_1aa75472ab4b765cf6f6b5b0ebcd4a28c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/><ref refid="namespacetl_1a2ac98dd95bdf0b59af459a290354c589" kindref="member">tl::malloc</ref>(size);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Free<sp/>memory<sp/>from<sp/>this<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="_memory_8cpp_1a22aea74a1155aa798d6032da46da2391" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[](</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetl_1a27f87676958c34ab5d023c25d954a58a" kindref="member">tl::free</ref>(ptr);<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>custom<sp/>free<sp/>for<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unsigned<sp/>int<sp/>parameter<sp/>is<sp/>needed<sp/>to<sp/>overload<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="_memory_8cpp_1a91e676caef3a7611d29e053ed1789a1a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetl_1a27f87676958c34ab5d023c25d954a58a" kindref="member">tl::free</ref>(ptr);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="TinyLib/Base/Memory.cpp"/>
  </compounddef>
</doxygen>
