<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classtl_1_1_vector" kind="class" language="C++" prot="public">
    <compoundname>tl::Vector</compoundname>
    <includes refid="_vector_8h" local="no">Vector.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtl_1_1_vector_1a7263eca46fab275b44ebb3cb53c1dde9" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* tl::Vector&lt; T &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <qualifiedname>tl::Vector::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="29" column="11" bodyfile="TinyLib/Base/Vector.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtl_1_1_vector_1a00cc4955f12f30cba58c472439650afe" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t tl::Vector&lt; T &gt;::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>tl::Vector::size</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="30" column="16" bodyfile="TinyLib/Base/Vector.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtl_1_1_vector_1a2841ff7d2deb2d8e786b3d2a369cbc3c" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t tl::Vector&lt; T &gt;::capacity</definition>
        <argsstring></argsstring>
        <name>capacity</name>
        <qualifiedname>tl::Vector::capacity</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="31" column="16" bodyfile="TinyLib/Base/Vector.h" bodystart="31" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classtl_1_1_vector_1a6c294b7b39a334eaec4367060e529aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tl::Vector&lt; T &gt;::Vector</definition>
        <argsstring>()</argsstring>
        <name>Vector</name>
        <qualifiedname>tl::Vector::Vector</qualifiedname>
        <briefdescription>
<para>Create a new empty vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>What type this vector will hold. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="9" column="9" bodyfile="TinyLib/Base/Vector.h" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1a3c0310b3d978ddf803d7aeaf9e82e698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tl::Vector&lt; T &gt;::~Vector</definition>
        <argsstring>()</argsstring>
        <name>~Vector</name>
        <qualifiedname>tl::Vector::~Vector</qualifiedname>
        <briefdescription>
<para>Clean up vector data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>How much memory is freed depends on the data type you used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="10" column="9" bodyfile="TinyLib/Base/Vector.h" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1acdb3986c49b9e8e803ac5078c68eea96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tl::Vector&lt; T &gt;::push</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>push</name>
        <qualifiedname>tl::Vector::push</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Adds a new element to the end of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Must match the type for this vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to add. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="11" column="14" bodyfile="TinyLib/Base/Vector.h" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1afb1123fd76e8b6b308a6c25999086afa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T tl::Vector&lt; T &gt;::pop</definition>
        <argsstring>()</argsstring>
        <name>pop</name>
        <qualifiedname>tl::Vector::pop</qualifiedname>
        <briefdescription>
<para>Get the last element and remove it from the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Must match the type for this vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The removed element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="12" column="11" bodyfile="TinyLib/Base/Vector.h" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1a7eb4dfa2eaf5b8df36fa3aea54c76b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; tl::Vector&lt; T &gt;::operator[]</definition>
        <argsstring>(size_t index)</argsstring>
        <name>operator[]</name>
        <qualifiedname>tl::Vector::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Write access to elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Must match the type for this vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to overwrite. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to element to overwrite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="13" column="11" bodyfile="TinyLib/Base/Vector.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1aee2285df44f5b04a4a6bbb9cad9fcc37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; tl::Vector&lt; T &gt;::operator[]</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>tl::Vector::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Read access to elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Must match the type for this vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to element to read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="14" column="17" bodyfile="TinyLib/Base/Vector.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1a07f7c6c116240b55639be24b8bdf142e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tl::Vector&lt; T &gt;::resize</definition>
        <argsstring>(size_t new_capacity)</argsstring>
        <name>resize</name>
        <qualifiedname>tl::Vector::resize</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>new_capacity</declname>
        </param>
        <briefdescription>
<para>Resize the max capacity for this vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Must match the type for this vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>New capacity.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If you don&apos;t use push or pop, you can also manually resize the vector with this, and can then access elements within capacity using []. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="15" column="14" bodyfile="TinyLib/Base/Vector.h" bodystart="114" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1af14e7f588cf809b751c27e54ca4d4c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tl::Vector&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>tl::Vector::clear</qualifiedname>
        <briefdescription>
<para>Clear vector size for most vector methods. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Must match the type for this vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="16" column="14" bodyfile="TinyLib/Base/Vector.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1a7a59cdb82916ebab5ae46f1b8f1efec6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tl::Vector&lt; T &gt;::getSize</definition>
        <argsstring>() const</argsstring>
        <name>getSize</name>
        <qualifiedname>tl::Vector::getSize</qualifiedname>
        <briefdescription>
<para>Get the size of this vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Must match the type for this vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current size of vector.</para>
</simplesect>
Size is based on how many elements actually exist in the vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="17" column="16" bodyfile="TinyLib/Base/Vector.h" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1abdd4105bc63e8757f0bf76162b3f61e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tl::Vector&lt; T &gt;::getCapacity</definition>
        <argsstring>() const</argsstring>
        <name>getCapacity</name>
        <qualifiedname>tl::Vector::getCapacity</qualifiedname>
        <briefdescription>
<para>Get the capacity of this vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Must match the type for this vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current capacity of vector.</para>
</simplesect>
Capacity is how big the internal array is for this vector. Good to check to make sure you don&apos;t go out of bounds with []. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="18" column="16" bodyfile="TinyLib/Base/Vector.h" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1a0453ee154d99303001476eb3e3abe6fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tl::Vector&lt; T &gt;::insert</definition>
        <argsstring>(size_t pos, const T &amp;value)</argsstring>
        <name>insert</name>
        <qualifiedname>tl::Vector::insert</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Insert an element anywhere in the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>T Must match the type for this vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position to insert element at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="19" column="14" bodyfile="TinyLib/Base/Vector.h" bodystart="168" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1ad694a236bd7afe82a1c0ee4b6a4229a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tl::Vector&lt; T &gt;::erase</definition>
        <argsstring>(size_t pos)</argsstring>
        <name>erase</name>
        <qualifiedname>tl::Vector::erase</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Delete an element and shift the rest of the vector to fit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>T Must match the type for this vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of element to delete.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
When you erase an element, everything to the right of that element will be shifted left in the vector to not leave an empty space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="20" column="14" bodyfile="TinyLib/Base/Vector.h" bodystart="187" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1adaad456fcc042885c805175e9331964d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * tl::Vector&lt; T &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>tl::Vector::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="23" column="11" bodyfile="TinyLib/Base/Vector.h" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1a496a89b7576a53b1b6d0101beb350991" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * tl::Vector&lt; T &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>tl::Vector::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="24" column="11" bodyfile="TinyLib/Base/Vector.h" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1a25f606e3214498664047c52437802f60" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T * tl::Vector&lt; T &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>tl::Vector::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="25" column="17" bodyfile="TinyLib/Base/Vector.h" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classtl_1_1_vector_1a06dd5aa9e15b7e51dac4cf2a768c70ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T * tl::Vector&lt; T &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>tl::Vector::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Vector.h" line="26" column="17" bodyfile="TinyLib/Base/Vector.h" bodystart="26" bodyend="26"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="TinyLib/Base/Vector.h" line="7" column="5" bodyfile="TinyLib/Base/Vector.h" bodystart="7" bodyend="32"/>
    <listofallmembers>
      <member refid="classtl_1_1_vector_1adaad456fcc042885c805175e9331964d" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>begin</name></member>
      <member refid="classtl_1_1_vector_1a25f606e3214498664047c52437802f60" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>begin</name></member>
      <member refid="classtl_1_1_vector_1a2841ff7d2deb2d8e786b3d2a369cbc3c" prot="private" virt="non-virtual"><scope>tl::Vector</scope><name>capacity</name></member>
      <member refid="classtl_1_1_vector_1af14e7f588cf809b751c27e54ca4d4c62" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>clear</name></member>
      <member refid="classtl_1_1_vector_1a7263eca46fab275b44ebb3cb53c1dde9" prot="private" virt="non-virtual"><scope>tl::Vector</scope><name>data</name></member>
      <member refid="classtl_1_1_vector_1a496a89b7576a53b1b6d0101beb350991" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>end</name></member>
      <member refid="classtl_1_1_vector_1a06dd5aa9e15b7e51dac4cf2a768c70ad" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>end</name></member>
      <member refid="classtl_1_1_vector_1ad694a236bd7afe82a1c0ee4b6a4229a9" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>erase</name></member>
      <member refid="classtl_1_1_vector_1abdd4105bc63e8757f0bf76162b3f61e2" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>getCapacity</name></member>
      <member refid="classtl_1_1_vector_1a7a59cdb82916ebab5ae46f1b8f1efec6" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>getSize</name></member>
      <member refid="classtl_1_1_vector_1a0453ee154d99303001476eb3e3abe6fc" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>insert</name></member>
      <member refid="classtl_1_1_vector_1a7eb4dfa2eaf5b8df36fa3aea54c76b17" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>operator[]</name></member>
      <member refid="classtl_1_1_vector_1aee2285df44f5b04a4a6bbb9cad9fcc37" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>operator[]</name></member>
      <member refid="classtl_1_1_vector_1afb1123fd76e8b6b308a6c25999086afa" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>pop</name></member>
      <member refid="classtl_1_1_vector_1acdb3986c49b9e8e803ac5078c68eea96" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>push</name></member>
      <member refid="classtl_1_1_vector_1a07f7c6c116240b55639be24b8bdf142e" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>resize</name></member>
      <member refid="classtl_1_1_vector_1a00cc4955f12f30cba58c472439650afe" prot="private" virt="non-virtual"><scope>tl::Vector</scope><name>size</name></member>
      <member refid="classtl_1_1_vector_1a6c294b7b39a334eaec4367060e529aee" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>Vector</name></member>
      <member refid="classtl_1_1_vector_1a3c0310b3d978ddf803d7aeaf9e82e698" prot="public" virt="non-virtual"><scope>tl::Vector</scope><name>~Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
