<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="_memory_8h" kind="file" language="C++">
    <compoundname>Memory.h</compoundname>
    <includes refid="_win_a_p_i_8h" local="yes">../Base/Win/WinAPI.h</includes>
    <includedby refid="_base_category_8h" local="yes">TinyLib/Base/BaseCategory.h</includedby>
    <includedby refid="_memory_8cpp" local="yes">TinyLib/Base/Memory.cpp</includedby>
    <includedby refid="_vector_8h" local="yes">TinyLib/Base/Vector.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>TinyLib/Base/Memory.h</label>
        <link refid="_memory_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../Base/Win/WinAPI.h</label>
        <link refid="_win_a_p_i_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>DirectXMath.h</label>
      </node>
      <node id="3">
        <label>Windows.h</label>
      </node>
      <node id="10">
        <label>d2d1.h</label>
      </node>
      <node id="4">
        <label>d3d11.h</label>
      </node>
      <node id="6">
        <label>d3dcompiler.h</label>
      </node>
      <node id="9">
        <label>dwrite.h</label>
      </node>
      <node id="5">
        <label>dxgi1_2.h</label>
      </node>
      <node id="8">
        <label>wrl/client.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>TinyLib/Base/BaseCategory.h</label>
        <link refid="_base_category_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>TinyLib/Base/Memory.cpp</label>
        <link refid="_memory_8cpp"/>
      </node>
      <node id="1">
        <label>TinyLib/Base/Memory.h</label>
        <link refid="_memory_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>TinyLib/Base/Vector.h</label>
        <link refid="_vector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>TinyLib/Console/Console.cpp</label>
        <link refid="_console_8cpp"/>
      </node>
      <node id="3">
        <label>TinyLib/Console/Console.h</label>
        <link refid="_console_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>TinyLib/Console/ConsoleCategory.h</label>
        <link refid="_console_category_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>TinyLib/Graphics/Drawable.cpp</label>
        <link refid="_drawable_8cpp"/>
      </node>
      <node id="8">
        <label>TinyLib/Graphics/GraphicsCategory.h</label>
        <link refid="_graphics_category_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>TinyLib/Graphics/Rectangle.cpp</label>
        <link refid="_rectangle_8cpp"/>
      </node>
      <node id="7">
        <label>TinyLib/Graphics/Rectangle.h</label>
        <link refid="_rectangle_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>TinyLib/Graphics/Text.cpp</label>
        <link refid="_text_8cpp"/>
      </node>
      <node id="13">
        <label>TinyLib/Graphics/Text.h</label>
        <link refid="_text_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>TinyLib/Graphics/Window.cpp</label>
        <link refid="_window_8cpp"/>
      </node>
      <node id="10">
        <label>TinyLib/Graphics/Window.h</label>
        <link refid="_window_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>TinyLib/System/File.cpp</label>
        <link refid="_file_8cpp"/>
      </node>
      <node id="15">
        <label>TinyLib/System/File.h</label>
        <link refid="_file_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>TinyLib/System/Mouse.cpp</label>
        <link refid="_mouse_8cpp"/>
      </node>
      <node id="18">
        <label>TinyLib/System/Mouse.h</label>
        <link refid="_mouse_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>TinyLib/System/SystemCategory.h</label>
        <link refid="_system_category_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>TinyLib/TinyLib.h</label>
        <link refid="_tiny_lib_8h"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacetl">tl</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="_memory_8h_1ad53e3688505c50e73a25b9de46f9f083" prot="public" static="no">
        <name>FLOAT_SUPPORT_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.h" line="14" column="9" bodyfile="TinyLib/Base/Memory.h" bodystart="14" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="_memory_8h_1a4cf04c7a2389a90415c8032ce5e58e50" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int _fltused</definition>
        <argsstring></argsstring>
        <name>_fltused</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.h" line="17" column="16" bodyfile="TinyLib/Base/Memory.h" bodystart="17" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_memory_8h_1a60ed7fe786cba3286c6ba182199163fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *__cdecl</type>
        <definition>void *__cdecl memset</definition>
        <argsstring>(void *, int, size_t)</argsstring>
        <name>memset</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.h" line="23" column="25" bodyfile="TinyLib/Base/Memory.cpp" bodystart="22" bodyend="29" declfile="TinyLib/Base/Memory.h" declline="23" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="_memory_8h_1a1a7f24760c8c7ad3bfcd54856d906fc2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * operator new</definition>
        <argsstring>(size_t size) noexcept</argsstring>
        <name>operator new</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.h" line="27" column="6" bodyfile="TinyLib/Base/Memory.cpp" bodystart="33" bodyend="38" declfile="TinyLib/Base/Memory.h" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_memory_8h_1afa145befcf5e7b83424408ca503c8637" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void operator delete</definition>
        <argsstring>(void *ptr) noexcept</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.h" line="28" column="6" bodyfile="TinyLib/Base/Memory.cpp" bodystart="41" bodyend="44" declfile="TinyLib/Base/Memory.h" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_memory_8h_1aa75472ab4b765cf6f6b5b0ebcd4a28c8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * operator new[]</definition>
        <argsstring>(size_t size) noexcept</argsstring>
        <name>operator new[]</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.h" line="29" column="6" bodyfile="TinyLib/Base/Memory.cpp" bodystart="47" bodyend="52" declfile="TinyLib/Base/Memory.h" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_memory_8h_1a22aea74a1155aa798d6032da46da2391" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void operator delete[]</definition>
        <argsstring>(void *ptr) noexcept</argsstring>
        <name>operator delete[]</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.h" line="30" column="6" bodyfile="TinyLib/Base/Memory.cpp" bodystart="55" bodyend="58" declfile="TinyLib/Base/Memory.h" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_memory_8h_1a91e676caef3a7611d29e053ed1789a1a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void operator delete</definition>
        <argsstring>(void *ptr, unsigned int size) noexcept</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TinyLib/Base/Memory.h" line="31" column="6" bodyfile="TinyLib/Base/Memory.cpp" bodystart="61" bodyend="64" declfile="TinyLib/Base/Memory.h" declline="31" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Deadly<sp/>zone<sp/>of<sp/>death,<sp/>beware.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_win_a_p_i_8h" kindref="compound">../Base/Win/WinAPI.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetl" kindref="compound">tl</ref><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Custom<sp/>malloc<sp/>and<sp/>free<sp/>can<sp/>go<sp/>in<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="namespacetl_1a2ac98dd95bdf0b59af459a290354c589" kindref="member">malloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetl_1a27f87676958c34ab5d023c25d954a58a" kindref="member">free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FLOAT_SUPPORT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="_memory_8h_1ad53e3688505c50e73a25b9de46f9f083" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLOAT_SUPPORT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Need<sp/>this<sp/>to<sp/>support<sp/>float<sp/>numbers<sp/>throughout<sp/>the<sp/>library.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="_memory_8h_1a4cf04c7a2389a90415c8032ce5e58e50" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_memory_8h_1a4cf04c7a2389a90415c8032ce5e58e50" kindref="member">_fltused</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>FLOAT_SUPPORT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>compiler<sp/>tries<sp/>to<sp/>optimize<sp/>with<sp/>memset,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>overwrite<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>__cdecl<sp/><ref refid="_memory_8h_1a60ed7fe786cba3286c6ba182199163fa" kindref="member">memset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>intrinsic(memset)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also<sp/>overloading<sp/>new<sp/>and<sp/>delete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[](</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
    </programlisting>
    <location file="TinyLib/Base/Memory.h"/>
  </compounddef>
</doxygen>
